name: Terraform Schema Check

on:
  pull_request:
    types: [synchronize, opened, reopened]

jobs:
  terraform-approval:
    needs: [terraform-schema-check, terraform-opa-check]
    runs-on: ubuntu-latest
    if: ${{ needs.terraform-schema-check.outputs.result == 'success' && needs.terraform-opa-check.outputs.result == 'success' }}
    steps:
    - name: Label PR
      uses: actions/labeler@v5
    - name: Approve and Merge PR
      id: auto-approve-and-merge-pr
        if: steps.check_results.outputs.approve == 'true' && steps.check_files_changed.outputs.approve == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issue_number,
              event: 'APPROVE'
            });

            // Add a label to indicate the PR was auto-approved
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['auto-approved']
            });

            /*
            // Merge the PR
            const mergeResponse = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issue_number,
              // Optional: Provide a merge commit message, title, or method if desired
              // commit_title: 'Auto-merging PR',
              // commit_message: 'Automatically merged by GitHub Actions',
              // merge_method: 'merge' // Options are 'merge', 'squash', or 'rebase'
            });

            if (!mergeResponse.data.merged) {
              console.log('Failed to merge the PR:', mergeResponse.data.message);
            } else {
              // If merged, then delete the branch
              const branchName = context.payload.pull_request.head.ref;
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              console.log(`Deleted branch: ${branchName}`);
                            
              console.log('PR successfully merged');
            }
            */
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
