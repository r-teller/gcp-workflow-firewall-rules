name: Terraform OPA Check and PR Approval

on:
  pull_request:    
    types: [synchronize, opened, reopened]

jobs:
  terraform-opa-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
            terraform_wrapper: false
            terraform_version: 1.6.6

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' # Replace with the name of your GitHub Actions secret

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan
          terraform show -json ./tfplan > ./tfplan.json
          
      - name: Pull Docker image
        id: PullDockerImage
        run: |
          docker pull "openpolicyagent/conftest:latest"

      - name: Run Conftest
        run: |
          docker run \
                --rm \
                -v "$(pwd)":/project \
                openpolicyagent/conftest \
                test --all-namespaces ./tfplan.json --output json > ./result.json          
        continue-on-error: true

      - name: Check for non-low severity issues
        id: check_results
        run: |
          # Generate JSON file with all firewall changes with their corresponding risk rating
          jq 'map((.failures[]?.metadata.namespace) = .namespace) | [.[].failures[]?]' ./result.json > ./failures.json
          result=$(jq '[.[] | select(.metadata.severity != "LOW")]' ./failures.json )
          if [ -z "$result" ]; then
            echo "No issues with severity higher than LOW found."
            echo "::set-output name=approve::true"
          else
            echo "Issues with severity higher than LOW found."
            echo "::set-output name=approve::false"
          fi

      - name: Approve PR
        if: steps.check_results.outputs.approve == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const issue_number = context.issue.number;
            
            github.rest.issues.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issue_number,
              event: 'APPROVE'
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with issues as a table
        if: steps.check_results.outputs.approve == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issue_number = context.issue.number;
            const issuesJson = fs.readFileSync('./failures.json', {encoding: 'utf8'});
            const issues = JSON.parse(issuesJson);

            let tableHeader = '| # | Action | Policy Name | Rule Name | Severity | Indicator |\n';
            let tableSeparator = '| --- | --- | --- | --- | --- | --- |\n';
            let tableRows = issues.map(issue => {
              const { metadata } = issue;
              const action = metadata?.action ?? 'N/A'; // Use nullish coalescing and optional chaining
              const namespace = metadata?.namespace ?? 'N/A';
              const name = metadata?.name ?? 'N/A';
              const severityIndicator = metadata?.severity === 'LOW' ? 'âœ…' : 'ðŸ”´';
              const severity = metadata?.severity ?? 'N/A';
              return `| ${index + 1} |${action} | ${namespace} | ${name} | ${severity} | ${severityIndicator} |`;
            }).join('\n');

            // Construct detailed messages
            let detailedMessages = "#### Detailed Messages:\n\n" + issues.map((issue, index) => {
              const { msg, metadata } = issue;
              return `${index + 1}. \n - Error Message: ${msg} \n - Severity: ${metadata?.severity ?? 'N/A'} \n - Project: ${metadata?.project ?? 'N/A'} \n - Network: ${metadata?.network ?? 'N/A'}`;
            }).join('\n\n');
                        
            const commentBody = `### Issues Requiring Manual Approval\n\n${tableHeader}${tableSeparator}${tableRows}`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: commentBody
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
