name: Terraform Pull Request Validation

on:
  pull_request:
    types: [synchronize, opened, reopened]

# Use a concurrency group to ensure serialized execution
concurrency:
  group: terraform-plan-or-apply
  cancel-in-progress: false

jobs:
  firewall-rules-schema-check:
    runs-on: ubuntu-latest
    outputs:
      jsonSchemaValidationErrors: ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}
      jsonLintErrors: ${{ steps.json_lint_and_schema_validation.outputs.jsonLintErrors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Prerequisites
        run: |
          sudo npm install ajv-cli ajv

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.6.6

      # Initialize Terraform so that script is able to read the schema file
      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Get list of changed files
        id: get_list_changed_files
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-shared/get_list_changed_files.js')
            await script({github, context, core})

      - name: JSON Lint & Schema Validation
        id: json_lint_and_schema_validation
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-schema-check/validate_schema_changed_files.js')
            const changedFiles = ${{steps.get_list_changed_files.outputs.changedFiles }}
            await script({github, context, core, changedFiles})
        continue-on-error: true

      - name: Check for JSON Lint Errors
        id: check_for_json_lint_errors
        uses: actions/github-script@v7
        with:
          script: |
            const errors = ${{ steps.json_lint_and_schema_validation.outputs.jsonLintErrors }}
            if (errors.length > 0) {
              console.log("JSON Lint Errors found in the following files:");
              errors.forEach(error => {
                console.log(`- ${error.filename}: ${error.error}`);
              });
              core.setFailed("JSON Lint Errors found");
            }

      - name: Set JSON Schema Validation Label
        id: set_json_schema_validation_label
        uses: actions/github-script@v7
        with:
          script: |
            const swap_labels = require('./.github/scripts/firewall-rules-shared/swap_labels.js')

            if(${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}) {
              await swap_labels({github, context, add_label_name: 'json-schema-validation-failed', remove_label_name: 'json-schema-validation-passed'})
            } else {
              await swap_labels({github, context, add_label_name: 'json-schema-validation-passed', remove_label_name: 'json-schema-validation-failed'})
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Pull Request
        id: comment_on_pull_request
        uses: actions/github-script@v7
        if: ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-schema-check/comment_failed_schema_files.js')
            const jsonSchemaValidationErrors = ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}
            await script({github, context, core, jsonSchemaValidationErrors})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  firewall-rules-opa-check:
    needs: [firewall-rules-schema-check]
    runs-on: ubuntu-latest
    outputs:
      criticalOpaViolationsDetected: ${{ steps.opa_output_validation.outputs.criticalOpaViolationsDetected }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OPA Output Validation
        id: opa_output_validation
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-opa-check/validate_terraform_plan.js')
            await script({github, context, core})

  firewall-rules-pull-request-approver:
    runs-on: ubuntu-latest
    needs: [
        # firewall-rules-lint,
        firewall-rules-schema-check,
        firewall-rules-opa-check,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual Approval Required
        id: manual-approval-required
        if: ${{ needs.firewall-rules-schema-check.outputs.jsonSchemaValidationErrors != '[]' || needs.firewall-rules-opa-check.outputs.criticalOpaViolationsDetected == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const lifecycle_labels = require('./.github/scripts/firewall-rules-shared/lifecycle_labels.js')
            await lifecycle_labels({github, context, remove_label_name: 'auto-approved'})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Approve Pull Request
        id: auto-approve-pull-request
        if: ${{ needs.firewall-rules-schema-check.outputs.jsonSchemaValidationErrors == '[]' && needs.firewall-rules-opa-check.outputs.criticalOpaViolationsDetected == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            # const issue_number = context.issue.number;
            const swap_labels = require('./.github/scripts/firewall-rules-shared/swap_labels.js')

            await swap_labels({github, context, add_label_name: 'auto-approved', remove_label_name: 'manual-approval-required'})

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE'
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
