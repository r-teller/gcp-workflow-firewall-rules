name: Terraform Pull Request Validation

on:
  pull_request:
    types: [synchronize, opened, reopened]

# Use a concurrency group to ensure serialized execution
concurrency:
  group: terraform-plan-or-apply
  cancel-in-progress: false

jobs:
  firewall-rules-validation-init:
    runs-on: ubuntu-latest
    outputs:
      changedFiles: ${{ steps.get_list_of_approved_changes.outputs.changedFiles }}
      nonApprovedChanges: ${{ steps.get_list_of_approved_changes.outputs.nonApprovedChanges }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Remove Auto-Approval Flags
        id: remove-auto-approval-flags
        uses: actions/github-script@v7
        with:
          script: |
            const lifecycle_labels = require('./.github/scripts/firewall-rules-shared/lifecycle_labels.js')
            await lifecycle_labels({github, context, remove_label_name: 'auto-approved'})

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const workflowApproval = reviews.find(review => 
              review.user.type === 'Bot' && 
              review.state === 'APPROVED' &&
              review.user.login.includes('[bot]')
            );

            if (workflowApproval) {
              console.log('Found previous workflow approval. Dismissing...');
              await github.rest.pulls.dismissReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                review_id: workflowApproval.id,
                message: 'Dismissing previous approval due to new changes or workflow re-run.'
              });
            } else {
              console.log('No previous workflow approval found.');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get list of approved changes
        id: get_list_of_approved_changes
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-lint/get_list_of_approved_changes.js')
            await script({github, context, core})

  firewall-rules-validation-schema-check:
    runs-on: ubuntu-latest
    needs:
      - firewall-rules-validation-init
    outputs:
      jsonSchemaValidationErrors: ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}
      jsonLintErrors: ${{ steps.json_lint_and_schema_validation.outputs.jsonLintErrors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Prerequisites
        run: |
          sudo npm install ajv-cli ajv

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.6.6

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: JSON Lint & Schema Validation
        id: json_lint_and_schema_validation
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-schema-check/validate_schema_changed_files.js')
            const changedFiles = ${{ needs.firewall-rules-validation-init.outputs.changedFiles }}
            await script({github, context, core, changedFiles})
        continue-on-error: true

      - name: Check for JSON Lint Errors
        id: check_for_json_lint_errors
        uses: actions/github-script@v7
        with:
          script: |
            const errors = ${{ steps.json_lint_and_schema_validation.outputs.jsonLintErrors }}
            if (errors.length > 0) {
              console.log("JSON Lint Errors found in the following files:");
              errors.forEach(error => {
                console.log(`- ${error.filename}: ${error.error}`);
              });
              core.setFailed("JSON Lint Errors found");
            }

      - name: Set JSON Schema Validation Label
        id: set_json_schema_validation_label
        uses: actions/github-script@v7
        with:
          script: |
            const swap_labels = require('./.github/scripts/firewall-rules-shared/swap_labels.js')

            if(${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}) {
              await swap_labels({github, context, add_label_name: 'json-schema-validation-failed', remove_label_name: 'json-schema-validation-passed'})
            } else {
              await swap_labels({github, context, add_label_name: 'json-schema-validation-passed', remove_label_name: 'json-schema-validation-failed'})
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Pull Request
        id: comment_on_pull_request
        uses: actions/github-script@v7
        if: ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors != '[]' }}
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-schema-check/comment_failed_schema_files.js')
            const jsonSchemaValidationErrors = ${{ steps.json_lint_and_schema_validation.outputs.jsonSchemaValidationErrors }}
            await script({github, context, core, jsonSchemaValidationErrors})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  firewall-rules-validation-opa-check:
    needs:
      - firewall-rules-validation-schema-check
    runs-on: ubuntu-latest
    outputs:
      criticalOpaViolationsDetected: ${{ steps.opa_output_validation.outputs.criticalOpaViolationsDetected }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}" # Replace with the name of your GitHub Actions secret

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -var generate_firewall_rules_map_json=true
          terraform show -json ./tfplan > ./tfplan.json

      - name: Pull Docker image
        id: PullDockerImage
        run: |
          docker pull "openpolicyagent/conftest:latest"

      - name: Run Conftest
        run: |
          docker run \
                --rm \
                -v "$(pwd)":/project \
                openpolicyagent/conftest \
                test --all-namespaces ./tfplan.json --output json > ./result.json

      - name: Validate Terraform Plan for OPA Violations
        id: validate_terraform_plan_opa_violations
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-opa-check/validate_terraform_plan_opa_violations.js')
            await script({github, context, core})
        continue-on-error: true

      - name: Comment on Pull Request
        id: comment_on_pull_request
        uses: actions/github-script@v7
        with:
          script: |
            const script = require('./.github/scripts/firewall-rules-opa-check/comment_pr_opa_violations.js')
            const opaViolations = ${{ steps.validate_terraform_plan_opa_violations.outputs.opaViolations }}
            await script({github, context, core, opaViolations})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  firewall-rules-validation-pull-request-approver:
    runs-on: ubuntu-latest
    needs:
      - firewall-rules-validation-schema-check
      - firewall-rules-validation-opa-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual Approval Required
        id: manual-approval-required
        if: ${{ needs.firewall-rules-validation-schema-check.outputs.jsonSchemaValidationErrors != '[]' || needs.firewall-rules-validation-opa-check.outputs.criticalOpaViolationsDetected == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const lifecycle_labels = require('./.github/scripts/firewall-rules-shared/lifecycle_labels.js')
            await lifecycle_labels({github, context, add_label_name: 'manual-approval-required', remove_label_name: 'auto-approved'})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Approve Pull Request
        id: auto-approve-pull-request
        if: ${{ needs.firewall-rules-validation-schema-check.outputs.jsonSchemaValidationErrors == '[]' && needs.firewall-rules-validation-opa-check.outputs.criticalOpaViolationsDetected == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const swap_labels = require('./.github/scripts/firewall-rules-shared/swap_labels.js')

            await swap_labels({github, context, add_label_name: 'auto-approved', remove_label_name: 'manual-approval-required'})

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issue_number,
              event: 'APPROVE'
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
